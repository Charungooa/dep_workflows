name: Build and Deploy to AKS

on:
  # push:
  #   branches:
  #     - main
  #     - develop
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Kubernetes namespace to deploy to'
        required: true
        default: 'default'
        type: choice
        options:
          - test
          - stage
          - live
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      # Dynamic Configuration Inputs
      acr_name:
        description: 'Azure Container Registry Name'
        required: true
        default: 'mycontainerregistry'
        type: string
      image_name:
        description: 'Docker Image Name'
        required: true
        default: 'webapp'
        type: string
      aks_cluster_name:
        description: 'AKS Cluster Name'
        required: true
        default: 'my-aks-cluster'
        type: string
      aks_resource_group:
        description: 'AKS Resource Group'
        required: true
        default: 'my-resource-group'
        type: string
      manifest_path:
        description: 'Kubernetes Manifest Path'
        required: true
        default: 'k8s/deployment.yaml'
        type: string

env:
  # These will be overridden by step outputs
  IMAGE_NAME: webapp
  AKS_CLUSTER_NAME: my-aks-cluster
  AKS_RESOURCE_GROUP: my-resource-group
  MANIFEST_PATH: k8s/deployment.yaml

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container  # ✅ Force container driver

      - name: Set dynamic environment variables
        id: config
        run: |
          ACR_NAME="${{ github.event.inputs.acr_name || 'mycontainerregistry' }}"
          ACR_LOGIN_SERVER="${ACR_NAME}.azurecr.io"
          
          echo "acr_name=${ACR_NAME}" >> $GITHUB_OUTPUT
          echo "acr_login_server=${ACR_LOGIN_SERVER}" >> $GITHUB_OUTPUT
          echo "image_name=${{ github.event.inputs.image_name || 'webapp' }}" >> $GITHUB_OUTPUT
          echo "aks_cluster_name=${{ github.event.inputs.aks_cluster_name || 'my-aks-cluster' }}" >> $GITHUB_OUTPUT
          echo "aks_resource_group=${{ github.event.inputs.aks_resource_group || 'my-resource-group' }}" >> $GITHUB_OUTPUT
          echo "manifest_path=${{ github.event.inputs.manifest_path || 'k8s/deployment.yaml' }}" >> $GITHUB_OUTPUT
          
          echo "=== Configuration Summary ==="
          echo "ACR_NAME: ${ACR_NAME}"
          echo "ACR_LOGIN_SERVER: ${ACR_LOGIN_SERVER}"
          echo "IMAGE_NAME: ${{ steps.config.outputs.image_name }}"
          echo "AKS_CLUSTER_NAME: ${{ steps.config.outputs.aks_cluster_name }}"
          echo "AKS_RESOURCE_GROUP: ${{ steps.config.outputs.aks_resource_group }}"
          echo "MANIFEST_PATH: ${{ steps.config.outputs.manifest_path }}"

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ steps.config.outputs.acr_login_server }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Generate image tag
        id: image_tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          IMAGE_TAG="${{ github.ref_name }}-${SHORT_SHA}-${TIMESTAMP}"
          FULL_IMAGE="${{ steps.config.outputs.acr_login_server }}/${{ steps.config.outputs.image_name }}:${IMAGE_TAG}"
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "full_image=${FULL_IMAGE}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}  # ✅ Force SAME builder
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.image_tag.outputs.full_image }}
            ${{ steps.config.outputs.acr_login_server }}/${{ steps.config.outputs.image_name }}:latest
          cache-from: type=registry,ref=${{ steps.config.outputs.acr_login_server }}/${{ steps.config.outputs.image_name }}:buildcache
          cache-to: type=registry,ref=${{ steps.config.outputs.acr_login_server }}/${{ steps.config.outputs.image_name }}:buildcache,mode=max

      - name: Update Kubernetes manifest
        run: |
          sed -i "s|image:.*|image: ${{ steps.image_tag.outputs.full_image }}|g" ${{ steps.config.outputs.manifest_path }}
          echo "Updated manifest:"
          cat ${{ steps.config.outputs.manifest_path }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ steps.config.outputs.aks_resource_group }}
          cluster-name: ${{ steps.config.outputs.aks_cluster_name }}

      - name: Verify AKS context
        run: |
          kubectl config current-context
          kubectl cluster-info

      - name: Set namespace variable
        id: namespace
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            NAMESPACE="${{ github.event.inputs.namespace }}"
          else
            case "${{ github.ref_name }}" in
              main)
                NAMESPACE="production"
                ;;
              develop)
                NAMESPACE="development"
                ;;
              *)
                NAMESPACE="staging"
                ;;
            esac
          fi
          echo "namespace=${NAMESPACE}" >> $GITHUB_OUTPUT
          echo "Deploying to namespace: ${NAMESPACE}"

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ steps.namespace.outputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to AKS
        run: |
          kubectl apply -f ${{ steps.config.outputs.manifest_path }} --namespace=${{ steps.namespace.outputs.namespace }}
          kubectl rollout status deployment/${{ steps.config.outputs.image_name }} --namespace=${{ steps.namespace.outputs.namespace }} --timeout=5m

      - name: Verify deployment
        run: |
          kubectl get pods --namespace=${{ steps.namespace.outputs.namespace }}
          kubectl get services --namespace=${{ steps.namespace.outputs.namespace }}

      - name: Deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ steps.image_tag.outputs.full_image }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace**: ${{ steps.namespace.outputs.namespace }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster**: ${{ steps.config.outputs.aks_cluster_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ACR**: ${{ steps.config.outputs.acr_login_server }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group**: ${{ steps.config.outputs.aks_resource_group }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Manifest**: ${{ steps.config.outputs.manifest_path }}" >> $GITHUB_STEP_SUMMARY